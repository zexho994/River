@startuml

circle client{}
client --> River

package River{
    interface River<T>{
        + (static) Stream<T> of(T...)
        + Stream<T> filter(Predicate<? super T>)
        + Stream<T> distinct();
        + forEach(Consumer<? super T>)
        + long count()
    }

    class RiverGenerator{
        + (static)<T> River<T> create(T...)
    }
    River .left.> RiverGenerator : depend on
}


package Pipeline{
    abstract Pipeline<T>{
        + River<T> source
        + River<T> previous
        + River<T> next
    }

    class AbstractRiverPipeline<T>{}
    River <|-right- AbstractRiverPipeline : impl
    Pipeline <|-- AbstractRiverPipeline : extends

    class PipelineStage<T>{
        + PipelineStage(AbstractRiverPipeline<T>, Op)
    }
    AbstractRiverPipeline <|-down- PipelineStage : extends

}

package Sin{
    interface Consumer{
        + void accept()
    }
    interface Sink<T>{
        + void begin()
        + void end()
    }
    Consumer <|-- Sink : impl

    abstract SinkChain{
        + AbstractRiverPipeline<T> river
        + SinkChain<T> next
        + final Consumer<T> consumer
        + Predicate<T> predicate
    }
    Sink <|-- SinkChain : impl
    SinkChain *- AbstractRiverPipeline
}

@enduml