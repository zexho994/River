@startuml

interface River<T>{
    + (static) Stream<T> of(T...)
    + Stream<T> filter(Predicate<? super T>)
    + Stream<T> distinct();
    + forEach(Consumer<? super T>)
    + long count()
}

class RiverGenerator{
    + (static)<T> River<T> create(T...)
}

River .left.> RiverGenerator : depend on

abstract Pipeline<T>{
    + River<T> source
    + River<T> previous
    + River<T> next
    + Op
}
Pipeline .* Op

class RefRiver<T>{}
River <|-- RefRiver : impl
Pipeline <|-- RefRiver : extends

class PipelineSource<T>{}
class PipelineStage<T>{}
RefRiver<|-- PipelineSource : extends
RefRiver <|-- PipelineStage : extends

enum Op{
    + source(0)
    + filter(1)
    + distinct(2)
}

@enduml